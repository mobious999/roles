---

- name: Configure Apache Tomcat by environment
  become: true
  become_user: root
  gather_facts: true

  block:
    - name: Create group
      group: name={{ tomcat_group }} state=present
    - name: Create user
      user: name={{ tomcat_user }} shell=/bin/sh group={{ tomcat_group }} state=present

    - name: Create folder
      file: path={{ tomcat_user_home }} state=directory owner={{ tomcat_user }} group={{ tomcat_group }} mode=0755

    - name: Change ownership of Tomcat installation to the {{ tomcat_user }}
      file: path={{ tomcat_user_home }} state=directory owner={{ tomcat_user }} group={{ tomcat_group }} recurse=yes

    - name: Ensure /opt/tomcat exists
      ansible.builtin.file:
        path: "{{ tomcat_user_home }}"
        state: directory
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        mode: '0755'

    - name: Ensure /opt/tomcat/versions exists
      ansible.builtin.file:
        path: "{{ tomcat_user_home }}/versions"
        state: directory
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        mode: '0755'

    - name: move tomcat archive to /tmp for unpacking
      src: apache-tomcat-{{ tomcat_version }}.tar.gz
      dest: /tmp
      mode: '0644'
      register: tomcat_copied

    - name: Extract Tomcat from the tmp directory
      ansible.builtin.unarchive:
        src: "/tmp/apache-tomcat-{{ tomcat_version }}.tar.gz"
        dest: "{{ tomcat_version_dir }}"
        remote_src: true
        extra_opts: ['--strip-components=1']
        owner: "{{ tomcat_user }}"
        group: "{{ tomcat_group }}"
        creates: "{{ tomcat_version_dir }}/bin/startup.sh"
        register: tomcat_extracted
      when: tomcat_copied is changed

    - name: Symlink to latest
      file:
        src: /opt/tomcat/versions/{{ tomcat_version }}
        dest: /opt/tomcat/latest
        state: link
        force: true
      when: tomcat_extracted is changed

    - name: Copy Tomcat systemd unit file
      template:
      src: tomcat.service.j2
      dest: /etc/systemd/system/tomcat.service
      owner: root
      group: root
      mode: '0644'

    - name: Enable and start the service
      service:
        name: "{{ service_name }}"
        state: started
        enabled: true

    - name: Fail if hostname is not set (for environment determination)
      fail:
      msg: "Hostname is not set; cannot determine environment."
      when: ansible_hostname is not defined or not ansible_hostname

    - name: Set environment based on hostname prefix
      set_fact:
        environment: >-
          {{
          ['dev', 'qa', 'uat', 'prod']
          | select('search', '^' ~ ansible_hostname)
          | list | first | default('unknown')
          }}

    - name: Debug detected environment
      debug:
      msg: "Host '{{ ansible_hostname }}' is in the '{{ environment }}' environment."

    - name: Include dev tasks
      include_tasks: dev.yml
      when: environment == 'dev'

    - name: Include qa tasks
      include_tasks: qa.yml
      when: environment == 'qa'

    - name: Include uat tasks
      include_tasks: uat.yml
      when: environment == 'uat'

    - name: Include prod tasks
      include_tasks: prod.yml
      when: environment == 'prod'

    - name: Fail if environment is unknown
      fail:
      msg: "Environment '{{ environment }}' is not recognized."
      when: environment == 'unknown'
